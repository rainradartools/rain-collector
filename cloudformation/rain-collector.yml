Parameters:

  RainDataBucket:
      Type: String
      Description: name of _existing_ rain data bucket

  SNSArn:
      Type: String
      Description: arn of _existing_ SNS for tweeting (or blank)

  ConfigurationBucket:
    Type: String
    Description: name of _existing_ config bucket

  CollectorFrequency: 
    Type: String
    Default: 5min
    AllowedValues: 
      - 1min
      - 5min
    Description: frequency for cloudwatch event to trigger Collector

Mappings: 
  CollectorFrequency: 
    1min: 
      cron: "cron(0/1 * * * ? *)"
    5min: 
      cron: "cron(0/5 * * * ? *)"
      

Resources:

  StateBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${AWS::StackName}-state


  LambdaCollectorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${RainDataBucket}/*
              -
                Effect: "Allow"
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${ConfigurationBucket}/*
              -
                Effect: "Allow"
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${StateBucket}/*
              -
                Effect: "Allow"
                Action:
                  - SNS:Publish
                Resource: "*"


  CWEventsTriggerCollectorFunction:
    Type: "AWS::Events::Rule"
    Properties:
      Description: fires collector lambda function
      ScheduleExpression: !FindInMap [CollectorFrequency, !Ref CollectorFrequency, cron ]
      State: ENABLED
      Targets:
        -
          Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}_Collector  
          Id: LambdaCollector
          Input: !Sub |
            {
              "empty": "event"
            }
  

  LambdaPermissionCWEvents:
    DependsOn: LambdaCollector
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}_Collector  
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"


  LambdaCollector:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return None
      Description: collects data and puts in s3
      FunctionName:
        !Sub ${AWS::StackName}_Collector
      Handler: index.handler
      MemorySize: 960
      Role:
        !GetAtt LambdaCollectorRole.Arn
      Runtime: python2.7
      Timeout: 120
      Environment:
        Variables:
          state_bucket: !Ref StateBucket
          rain_data_bucket: !Ref RainDataBucket
          configuration_bucket: !Ref ConfigurationBucket
          sns_arn: !Ref SNSArn
